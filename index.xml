<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>FPFIS documentation on FPFIS Documentation</title>
    <link>https://docs.fpfis.eu/</link>
    <description>Recent content in FPFIS documentation on FPFIS Documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://docs.fpfis.eu/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Flavors</title>
      <link>https://docs.fpfis.eu/docker-images/php/flavors/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.fpfis.eu/docker-images/php/flavors/</guid>
      <description>Image flavors Base The image contains PHP and Apache, no additional services are running.
All subsequent development images are base on this image.
$ docker pull fpfis/httpd-php:5.6 $ docker pull fpfis/httpd-php:7.1 $ docker pull fpfis/httpd-php:7.2  Full image Based on the base image.
Additional components have been added for convenience :
 Java OCI  $ docker pull fpfis/httpd-php-full:5.6 $ docker pull fpfis/httpd-php-full:7.1 $ docker pull fpfis/httpd-php-full:7.2  Development image Based on the full image, various dev services and packages are also included :</description>
    </item>
    
    <item>
      <title>Versioning</title>
      <link>https://docs.fpfis.eu/docker-images/php/versioning/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.fpfis.eu/docker-images/php/versioning/</guid>
      <description>We follow upstream version for tagging.
Tagging rational    tag type build environment     x.x beta push on develop acceptance/playground/testing/development   5.6.36(-1..xx) stable tag from develop selective/edge cases/regression testing   7.1.2(-1..xx) stable tag from develop selective/edge cases/regression testing   production-x.x stable merge from develop or tag production     Alpha: versions are always the latest build of our docker images, they should be used for testing and ensure no issue are found at the infrastructure level before the image hits the production servers.</description>
    </item>
    
    <item>
      <title>Configuration</title>
      <link>https://docs.fpfis.eu/docker-images/php/configuration/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.fpfis.eu/docker-images/php/configuration/</guid>
      <description>Runtime docker configuration    env Description Default     APACHE_ACCESS_LOG Location of apache&amp;rsquo;s access log /proc/self/fd/1   APACHE_ERROR_LOG Location of apache&amp;rsquo;s error log /proc/self/fd/2   DAEMON_GROUP Group name to run the daemons with www-data   DAEMON_USER Username to run the daemons with www-data   DOCUMENT_ROOT Document root /var/www/html   SITE_PATH Site URL location (non-dev) /   FPM_MAX_CHILDREN Max number of PHP processes 5   FPM_MIN_CHILDREN Min number of PHP processes 2   HTTP_PORT Port to listen on 8080   PHP_MAX_EXECUTION_TIME PHP max execution time 30   PHP_MAX_INPUT_TIME PHP max input time 30   PHP_MEMORY_LIMIT PHP memory limit 512M   SMTP_SERVER SMTP server to use empty   SMTP_PORT SMTP port to use 25   SMTP_FROM SMTP From to use empty   SMTP_USERNAME Username to use for SMTP auth empty   SMTP_PASSWORD Password to use for SMTP auth empty    With docker-compose Eg, if you have an app with a web folder that should be the document root :</description>
    </item>
    
    <item>
      <title>Varnish</title>
      <link>https://docs.fpfis.eu/docker-images/varnish/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.fpfis.eu/docker-images/varnish/</guid>
      <description>Image Image is named fpfis/varnish and are based on Ubuntu.
Supported version  4.1
 6  VMOD included The following vmods have been included :
 Varnish extra vmods Drupal 7  Configuration Environment configuration    env Description Default     HTTP_PORT Port to listen on 8086   MAX_MEMORY Maximum memory to use for caching 1G   YAML_CONF YAML file to read backend config /config.</description>
    </item>
    
    <item>
      <title>Drone Client PHP SDK</title>
      <link>https://docs.fpfis.eu/drone/php-sdks/drone-client-sdk/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.fpfis.eu/drone/php-sdks/drone-client-sdk/</guid>
      <description>The client SDK is currently unstested an a work in progress
 Using with composer $ composer require gboddin/php-drone-client  Getting Started Please follow the installation procedure and then run the following:
&amp;lt;?php require_once(__DIR__ . &#39;/vendor/autoload.php&#39;); // Configure API key authorization: accessToken DroneClient\Configuration::getDefaultConfiguration()-&amp;gt;setApiKey(&#39;access_token&#39;, &#39;YOUR_API_KEY&#39;); // Uncomment below to setup prefix (e.g. Bearer) for API key, if needed // DroneClient\Configuration::getDefaultConfiguration()-&amp;gt;setApiKeyPrefix(&#39;access_token&#39;, &#39;Bearer&#39;); $api_instance = new DroneClient\Api\BuildsApi(); $owner = &amp;quot;owner_example&amp;quot;; // string | owner of the repository $name = &amp;quot;name_example&amp;quot;; // string | name of the repository try { $result = $api_instance-&amp;gt;reposOwnerNameBuildsGet($owner, $name); print_r($result); } catch (Exception $e) { echo &#39;Exception when calling BuildsApi-&amp;gt;reposOwnerNameBuildsGet: &#39;, $e-&amp;gt;getMessage(), PHP_EOL; } ?</description>
    </item>
    
    <item>
      <title>Drone Plugin PHP SDK</title>
      <link>https://docs.fpfis.eu/drone/php-sdks/drone-plugin-sdk/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.fpfis.eu/drone/php-sdks/drone-plugin-sdk/</guid>
      <description>Allows for creating PHP based plugins.
Using with composer $ composer require phpdrone/drone-plugin-sdk:~0.1  Example &amp;lt;?php require __DIR__.&amp;quot;/vendor/autoload.php&amp;quot;; // Get the build : $build = new \DronePluginSdk\Build(); // Get some settings : var_dump($build-&amp;gt;getPluginParameter(&#39;my_parameter&#39;));  Full example See the example included on Github
API documentation See the full API documentation</description>
    </item>
    
    <item>
      <title>NextEuropa Varnish</title>
      <link>https://docs.fpfis.eu/docker-images/varnish-ne/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.fpfis.eu/docker-images/varnish-ne/</guid>
      <description>Image The image is named fpfis/varnish-ne:4.1.
It is based on fpfis/varnish and as such inherits all configuration options from the fpfis/varnish image.
The NextEuropa VCL is included and includes the purging mechanism.
Supported version  4.1
  Running docker run -p 8086:8086 -ti --rm -e YAML_CONF=/yaml.conf -v $(pwd)/config.yaml:/config.yaml fpfis/varnish-ne:4.1</description>
    </item>
    
    <item>
      <title>Redis</title>
      <link>https://docs.fpfis.eu/docker-images/redis/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.fpfis.eu/docker-images/redis/</guid>
      <description> Image We recommend using the latest Redis 4.0 image
Configuration See the Docker Hub&amp;rsquo;s page.
Port Redis is running on port 6379 by default.
Example docker run -p 6379:6379 -ti --rm redis  </description>
    </item>
    
    <item>
      <title>Backtrac PHP client</title>
      <link>https://docs.fpfis.eu/php-sdks/backtrac-php-client/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.fpfis.eu/php-sdks/backtrac-php-client/</guid>
      <description>This projects includes both a client library and a phing helper to trigger visual comparison.
Usage API Documentation See the generated documentation
Installation composer require ec-europa/backtrac-php-client:~0.1  Examples Usage as library &amp;lt;?php require_once __DIR__.&#39;/../vendor/autoload.php&#39;; $client = new \EC\Utils\Backtrac\Client( 1, &#39;aaaaaaaaaaaaaaa&#39; ); /** * Create a website object */ $website = new \EC\Utils\Backtrac\Website(&#39;test-site&#39;,&#39;http://ci-test.com&#39;); /** * Set the new url for dev : */ $client-&amp;gt;setDevWebsite($website); /** * Compare prod a dev : */ $diffId = $client-&amp;gt;compareEnvironments( \EC\Utils\Backtrac\Client::COMPARE_PROD_DEV )-&amp;gt;result-&amp;gt;nid; /** * Wait for the end of the diff and display result : */ var_dump( $client-&amp;gt;waitForResults($diffId) ); /** * Custom compare : */ var_dump( $client-&amp;gt;customCompare( &#39;my_diff&#39;, new \EC\Utils\Backtrac\Website(&#39;site_1&#39;,&#39;http://xxxx.</description>
    </item>
    
    <item>
      <title>Composer SA Checker</title>
      <link>https://docs.fpfis.eu/drone/drone-plugins/composer-sa-checker/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.fpfis.eu/drone/drone-plugins/composer-sa-checker/</guid>
      <description> This plugin connects to Sensiolab Security Advisories, to check if your composer.lock contains any reference to vulnerable components.
Usage pipeline: test-composer-deps: image: phpdrone/composer-sa-checker # lock_file: composer.lock  Result Security Report =============== No known* vulnerabilities detected. * Disclaimer: This checker can only detect vulnerabilities that are referenced in the SensioLabs security advisories database.  </description>
    </item>
    
    <item>
      <title>PHAR Composer</title>
      <link>https://docs.fpfis.eu/drone/drone-plugins/phar-composer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.fpfis.eu/drone/drone-plugins/phar-composer/</guid>
      <description>This plugins allows for creating a standalone PHAR file from a composer project.
Operation The plugin will :
 Move away your current vendor, .git and .drone.yml file Do a composer install --no-dev to get a minimal build Build a PHAR file Restore your vendor, .git and .drone.yml file  Example pipeline: build-phar: image: phpdrone/phar-composer output: ghcli.phar  Result Backing up vendor directory ... Moving away non-dist material ... Installing mininal components .</description>
    </item>
    
    <item>
      <title>Packer</title>
      <link>https://docs.fpfis.eu/drone/drone-plugins/packer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.fpfis.eu/drone/drone-plugins/packer/</guid>
      <description>Description Packer is a tool by Hashicorp to automatically build machine images.
It supports Docker, Virtualbox, AWS EC2 and many more.
Image Image is named fpfis/packer and based on Alpine.
Configuration No configuration is available for this image.
Examples From CLI docker run -v $(pwd):$(pwd) -w $(pwd) -ti --rm fpfis/packer  From Drone pipeline: run-packer: image: fpfis/packer</description>
    </item>
    
    <item>
      <title>iTopApi</title>
      <link>https://docs.fpfis.eu/php-sdks/itopapi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.fpfis.eu/php-sdks/itopapi/</guid>
      <description>iTopApi PHP is an helper class to use and query the iTop API from your PHP scripts.
Usage API documentation See the generated documentation.
Installation composer require ec-europa/itopapi  Examples Getting data require &#39;vendor/autoload.php&#39;; $iTopAPI = new \iTopApi\ITopClient( &#39;http://localhost/itop&#39;, &#39;itopUser&#39;, &#39;iTopPassword&#39; ); //disable SSL checks ? //$iTopAPI-&amp;gt;setCertificateCheck(false); $query = sprintf(&amp;quot;SELECT Servers WHERE environment = &#39;%s&#39;&amp;quot;,&#39;development&#39;); $serversRequest = $iTopAPI-&amp;gt;coreGet(&amp;quot;Servers&amp;quot;,$query); $servers = $serverRequest[&#39;objects&#39;];  Creating data require &#39;vendor/autoload.php&#39;; $iTopAPI = new \iTopApi\ITopClient( &#39;http://localhost/itop&#39;, &#39;itopUser&#39;, &#39;iTopPassword&#39; ); //disable SSL checks ?</description>
    </item>
    
    <item>
      <title>phpDoc</title>
      <link>https://docs.fpfis.eu/drone/drone-plugins/phpdoc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://docs.fpfis.eu/drone/drone-plugins/phpdoc/</guid>
      <description>This plugins allows for generating phpDocumentator site based on phpdoc.xml
Example pipeline: build-doc: image: phpdrone/phpdoc:2.8  Result Collecting files .. OK Initializing parser .. OK Parsing files Parsing /drone/src/github.com/phpdrone/drone-plugin-sdk/src/Repo.php No summary was found for this file No summary for method getOwner() No summary for method getName() No summary for method getLink() No summary for method getDefaultBranch() No summary for method isPrivate() No summary for method isTrusted() Parsing /drone/src/github.com/phpdrone/drone-plugin-sdk/src/Commit.php No summary was found for this file No summary for method getBranch() No summary for method getTag() No summary for method getSha() No summary for method getMessage() No summary for method getAuthorName() No summary for method getAuthorEmail() No summary for method getRef() Parsing /drone/src/github.</description>
    </item>
    
  </channel>
</rss>